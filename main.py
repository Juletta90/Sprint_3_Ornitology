# 1.
# Наставник кружка юных орнитологов просит вас написать программу, которая будет выводить информацию о размере разных птиц.
# Объявите класс Bird со свойствами name (название птицы) и size (размер птицы).
# Метод этого класса describe должен возвращать описание птицы в формате строки — Размер птицы {name} — {size}..
# Создайте два дочерних класса — Parrot (попугаи) и Penguin (пингвины),
# которые полностью наследуют свойства и методы родительского класса.

# 2.
# Для класса Parrot цвет — важный параметр. Расширьте конструктор этого класса так, чтобы кроме имени и размера экземпляры класса принимали параметр color, цвет птицы.
# Создайте экземпляр класса Parrot и положите его в переменную kesha. Название птицы —  Ара, размер — средний, цвет — красный.
# Также расширьте конструктор класса Penguin. Экземпляры этого класса должны принимать дополнительный параметр genus, вид пингвина.
# Создайте экземпляр класса Penguin и положите его в переменную kowalski. Название птицы — Королевский, размер — большой, вид — Aptenodytes.

# 3.
# Метод родительского класса describe даёт очень скудное описание птиц. Исправим это.
# Для метода describe в родительском классе добавился параметр full со значением по умолчанию False. Ваша задача — переопределить этот метод для каждого дочернего класса:
# если параметр full равен False, метод должен возвращать стандартное описание птицы из родительского класса;
# если параметр full равен True, метод должен возвращать полное описание птицы.
# Полное описание для класса Parrot :
# Попугай name — заметная птица, окрас её перьев — color, а размер — size. Интересный факт: попугаи чувствуют ритм, а вовсе не бездумно двигаются под музыку. Если сменить композицию, то и темп движений птицы изменится.
# Полное описание для класса Рenguin:
# Размер пингвина name из рода genus — size. Интересный факт: однажды группа геологов-разведчиков похитила пингвинье яйцо, и их принялась преследовать вся стая, не пытаясь, впрочем, при этом нападать. Посовещавшись, похитители вернули птицам яйцо, и те отстали.


# Место для вашего кода.
class Bird:
    def __init__(self, name, size):   # свойства класса
        self.name = name
        self.size = size

    def describe(self, full=False):
        return f'Размер птицы {self.name} — {self.size}.'


class Parrot(Bird):
    # В классе-наследнике определяется конструктор
    # с собственным параметром color.
    def __init__(self, name, size, color):   # Написала доп. параметр - color
        # Вызываем конструктор класса-родителя.
        super().__init__(name, size)
        # Передаём значение параметра в новое свойство.
        self.color = color

    # Переопределите метод describe().
    # Если требуется допустить создание объектов от дочернего класса
    # без передачи аргументов, придется назначить значения по
    # умолчанию также в конструкторе дочернего класса.

    def describe(self, full=False):
        if full:
            return (f'Попугай {self.name} — заметная птица, '
                    f'окрас её перьев — {self.color}, '
                    f'а размер — {self.size}. '
                    'Интересный факт: попугаи чувствуют ритм, '
                    'а вовсе не бездумно двигаются под музыку. '
                    'Если сменить композицию, '
                    'то и темп движений птицы изменится.')
        return super().describe()

    # Добавьте метод repeat().
    def repeat(self, phrase):
        return f'Попугай {self.name} говорит: {phrase}.'


class Penguin(Bird):
    def __init__(self, name, size, genus):  # Написала доп. параметр - вид пингвина
        super().__init__(name, size)
        self.genus = genus

    # Переопределите метод describe().
    def describe(self, full=True):
        if full:
            return (f'Размер пингвина {self.name} из рода {self.genus} — {self.size}. '
                    'Интересный факт: однажды группа геологов-разведчиков похитила '
                    'пингвинье яйцо, и их принялась преследовать вся стая, не пытаясь, '
                    'впрочем, при этом нападать. Посовещавшись, похитители вернули птицам яйцо, и те отстали.')
        return super().describe()

    # Добавьте метод swimming().
    def swimming(self):
        return f'Пингвин {self.name} плавает со средней скоростью 11 км/ч.'


kesha = Parrot('Ара', 'средний', 'красный')
kowalski = Penguin('Королевский', 'большой', 'Aptenodytes')

# Вызов метода у созданных объектов.
print(kesha.describe())
print(kowalski.describe(True))

print(kesha.repeat('Кеша хороший!'))
print(kowalski.swimming())

